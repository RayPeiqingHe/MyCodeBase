#!/usr/bin/python
# -*- coding: utf-8 -*-

# strategy.py

from __future__ import print_function

from abc import ABCMeta, abstractmethod

try:
    import Queue as queue
except ImportError:
    import queue


class StrategyMetaClass(ABCMeta):
    """
    Custom meta class to keep track of all strategies

    """

    strategy_id_map = {}
    strategy_cnt = 0

    def __init__(cls, name, bases, attrs):
        if "__init__" in cls.__dict__:

            cls.strategy_cnt += 1

            cls.strategy_id_map[str(cls)] = cls.strategy_cnt

        super(StrategyMetaClass, cls).__init__(name, bases, attrs)


class Strategy(object):
    """
    Strategy is an abstract base class providing an interface for
    all subsequent (inherited) strategy handling objects.

    The goal of a (derived) Strategy object is to generate Signal
    objects for particular symbols based on the inputs of Bars
    (OHLCV) generated by a DataHandler object.

    This is designed to work both with historic and live data as
    the Strategy object is agnostic to where the data came from,
    since it obtains the bar tuples from a queue object.

    This based class os to be inherited by the subsequent mean-revert
    strategy and machine-learning forecasting strategy
    """

    __metaclass__ = StrategyMetaClass

    @abstractmethod
    def calculate_signals(self, event):
        """
        Provides the mechanisms to calculate the list of signals.
        """
        raise NotImplementedError("Should implement calculate_signals()")

    @property
    def strategy_id(self):

        cls = type(self)

        return cls.strategy_id_map[str(cls)]